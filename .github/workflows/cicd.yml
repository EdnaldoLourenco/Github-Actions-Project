name: CICD Pipeline

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

jobs:
  compile:

    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn compile
  
  security-check:

    runs-on: self-hosted
    needs: compile

    steps:
    - uses: actions/checkout@v4
    - name: Trivy Install
      run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install trivy -y
          
    - name: Trivy Fs Scan
      run: trivy fs --format table -o fs-report.json .

    - name: Gitleaks Install
      run: |
          GITLEAKS_VERSION=$(curl -s "https://api.github.com/repos/gitleaks/gitleaks/releases/latest" | grep -Po '"tag_name": "v\K[0-9.]+')
          wget -qO gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz
          sudo tar xf gitleaks.tar.gz -C /usr/local/bin gitleaks

    - name: Gitleaks Code Scan
      run: gitleaks detect source . -r gitleaks-report.json -f json

  test:

    runs-on: self-hosted
    needs: security-check
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Unit Test Cases
      run: mvn test
  
  build_project_and_sonar_scan:

    runs-on: self-hosted
    needs: test
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build Project
      run: mvn package

    - name: Upload JAR Artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar


    - uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.1.0 # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}


    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeoutSec: 600
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }} #OPTIONAL

  build_docker_image_and_push:

    runs-on: self-hosted
    needs: build_project_and_sonar_scan
    steps:
    - uses: actions/checkout@v4
    - name: Download JAR Artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: app # this will download JAR to . /app folder

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      uses: docker/build-push-action@v6          
      with:
        push: true          
        tags: ednaldoljr/bankapp:latest
        context: .
        file: ./Dockerfile

  deploy_to_k8s:

    runs-on: self-hosted
    needs: build_docker_image_and_push
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install AZ CLI
        run : curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      - uses: azure/login@v2
        name: Azure Login
        with:
           client-id: ${{ secrets.AZURE_CLIENT_ID }}
           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - uses: azure/aks-set-context@v4
        with:
           resource-group: 'rg-aks'
           cluster-name: 'aks-github-actions'

      - uses: Azure/k8s-deploy@v5
        with:
           action: deploy
           manifests: ds.yml